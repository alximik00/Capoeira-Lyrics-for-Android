package com.alximik.capoeiralyrics.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.alximik.capoeiralyrics.db.DaoSession;
import com.alximik.capoeiralyrics.entities.Song;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTE.
*/
public class SongDao extends AbstractDao<Song, Long> {

    public static final String TABLENAME = "songs";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "title");
        public final static Property Author = new Property(2, String.class, "author", false, "author");
        public final static Property Text = new Property(3, String.class, "text", false, "text");
        public final static Property TitleNorm = new Property(4, String.class, "titleNorm", false, "titleNorm");
        public final static Property AuthorNorm = new Property(5, String.class, "authorNorm", false, "authorNorm");
        public final static Property TextNorm = new Property(6, String.class, "textNorm", false, "textNorm");
        public final static Property EngText = new Property(7, String.class, "engText", false, "engText");
        public final static Property RusText = new Property(8, String.class, "rusText", false, "rusText");
        public final static Property IsFavourite = new Property(9, String.class, "isFavourite", false, "isFavourite");
        public final static Property VideoUrl = new Property(10, String.class, "videoUrl", false, "videoUrl");
    };


    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'songs' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'title' TEXT NOT NULL ," + // 1: text
                "'author' TEXT," + // 2: comment
                "'text' TEXT," + // 2: comment
                "'titleNorm' TEXT," + // 2: comment
                "'authorNorm' TEXT," + // 2: comment
                "'textNorm' TEXT," + // 2: comment
                "'engText' TEXT," + // 2: comment
                "'rusText' TEXT," + // 2: comment
                "'isFavourite' INTEGER," + // 2: comment
                "'videoUrl' TEXT);"; // 3: date


        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());

        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }

        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }

        String titleNorm = entity.getTitleNorm();
        if (titleNorm != null) {
            stmt.bindString(5, titleNorm);
        }

        String authorNorm = entity.getAuthorNorm();
        if (authorNorm != null) {
            stmt.bindString(6, authorNorm);
        }

        String textNorm = entity.getTextNorm();
        if (textNorm != null) {
            stmt.bindString(7, textNorm);
        }

        String engText = entity.getEngText();
        if (engText != null) {
            stmt.bindString(8, engText);
        }

        String rusText = entity.getRusText();
        if (rusText != null) {
            stmt.bindString(9, rusText);
        }
        Boolean isFavourite = entity.isFavourite();
        if (isFavourite != null) {
            stmt.bindLong(10, isFavourite?1:0);
        }

        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(11, videoUrl);
        }

    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // text
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // engtext
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // rustext
            cursor.isNull(offset + 9) ? null : (cursor.getLong(offset + 9) != 0), // fav
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // video

        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEngText(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRusText(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFavourite(cursor.isNull(offset + 9) ? null : (cursor.getLong(offset + 9) !=0));
        entity.setVideoUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected Long updateKeyAfterInsert(Song entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Song entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
